
/*********************************************************************
 * This file is automatically generated by mmir-plugins-export tools *
 *        Do not modify: ANY CHANGES WILL GET DISCARDED              *
 *********************************************************************/

var _id = "mmir-plugin-tts-speakjs";
var _paths = {
  "mmir-plugin-tts-speakjs/speakGenerator": "www/speakGenerator.js",
  "mmir-plugin-tts-speakjs/speakGenerator.min": "www/speakGenerator.min.js",
  "mmir-plugin-tts-speakjs/ttsSpeakjs": "www/ttsSpeakjs.js",
  "mmir-plugin-tts-speakjs/ttsSpeakjsCompat": "www/alt/ttsSpeakjsCompat.js",
  "mmir-plugin-tts-speakjs/ttsSpeakjsWebpack": "www/alt/ttsSpeakjsWebpack.js",
  "mmir-plugin-tts-speakjs/workers/speakWorkerExt": "www/webworker/speakWorkerExt.js",
  "mmir-plugin-tts-speakjs": "www/ttsSpeakjs.js"
};
var _workers = [
  "mmir-plugin-tts-speakjs/workers/speakWorkerExt"
];
var _exportedModules = [
  "mmir-plugin-tts-speakjs"
];
var _dependencies = [];
var _exportedFiles = [];
var _modes = {};
var _buildConfig = "module-config.gen.js";
function _join(source, target, dict){
  source.forEach(function(item){
    if(!dict[item]){
      dict[item] = true;
      target.push(item);
    }
  });
};
function _toDict(list){
  var dict = {};
  list.forEach(function(item){
    dict[item] = true;
  });
  return dict;
};
function _getAll(type, mode, isResolve){

  if(typeof mode === 'boolean'){
    isResolve = mode;
    mode = void(0);
  }

  var data = this[type];
  var isArray = Array.isArray(data);
  var result = isArray? [] : Object.assign({}, data);
  var dupl = result;
  var mod = mode && this.modes[mode];
  if(isArray){
    dupl = {};
    if(mod && mod[type]){
      _join(this.modes[mode][type], result, dupl);
    }
    _join(data, result, dupl);
  } else if(isResolve){
    var root = __dirname;
    Object.keys(result).forEach(function(field){
      var val = result[field];
      if(mod && mod[field]){
        val = _paths[mod[field]];
      }
      result[field] = root + '/' + val;
    });
  }
  this.dependencies.forEach(function(dep){
    var depExports = require(dep + '/module-ids.gen.js');
    var depData = depExports.getAll(type, mode, isResolve);
    if(isArray){
      _join(depData, result, dupl);
    } else {
      Object.assign(result, depData)
    }
  });

  return result;
};
function _getBuildConfig(pluginName, buildConfigsMap){
  if(pluginName && typeof pluginName !== 'string'){
    buildConfigsMap = pluginName;
    pluginName = void(0);
  }
  var buildConfigs = [];
  var dupl = Array.isArray(buildConfigsMap)? _toDict(buildConfigsMap) : buildConfigsMap || {};
  if(_buildConfig){
    var buildConfigMod = require(__dirname+'/'+_buildConfig);
    var buildConfig = buildConfigMod.buildConfigs;
    if(Array.isArray(buildConfig)){
      _join(buildConfig, buildConfigs, dupl);
    } else if(buildConfig && !dupl[buildConfig]){
      dupl[buildConfig] = true;
      buildConfigs.push(buildConfig);
    }
    if(Array.isArray(buildConfigMod.pluginName) && buildConfigMod.plugins){
      buildConfigMod.pluginName.forEach(function(name){
        if(!pluginName || pluginName === name){
          var pluginBuildConfig = buildConfigMod.plugins[name].buildConfigs;
          if(Array.isArray(pluginBuildConfig)){
            _join(pluginBuildConfig, buildConfigs, dupl);
          } else if(pluginBuildConfig && !dupl[pluginBuildConfig]){
            dupl[pluginBuildConfig] = true;
            buildConfigs.push(pluginBuildConfig);
          }
        }
      });
    }
  }

  this.dependencies.forEach(function(dep){
    var depExports = require(dep + '/module-ids.gen.js');
    if(depExports.buildConfig){
      var depBuildConfigs = depExports.getBuildConfig(null, dupl);
      _join(depBuildConfigs, buildConfigs, dupl);
    }
  });

  return buildConfigs;
};
module.exports = {id: _id, paths: _paths, workers: _workers, modules: _exportedModules, files: _exportedFiles, dependencies: _dependencies, modes: _modes, buildConfig: _buildConfig, getAll: _getAll, getBuildConfig: _getBuildConfig};
